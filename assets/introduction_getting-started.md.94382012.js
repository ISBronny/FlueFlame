import{_ as s,c as a,o as n,b as e}from"./app.c64e97e0.js";const A=JSON.parse(`{"title":"Getting Started","description":"","frontmatter":{},"headers":[{"level":2,"title":"Step. 1: Create Unit test project","slug":"step-1-create-unit-test-project","link":"#step-1-create-unit-test-project","children":[]},{"level":2,"title":"Step. 2: Create TestBase class","slug":"step-2-create-testbase-class","link":"#step-2-create-testbase-class","children":[]},{"level":2,"title":"Step. 3: Your first test","slug":"step-3-your-first-test","link":"#step-3-your-first-test","children":[]},{"level":2,"title":"What's next?","slug":"what-s-next","link":"#what-s-next","children":[]}],"relativePath":"introduction/getting-started.md","lastUpdated":1669556156000}`),l={name:"introduction/getting-started.md"},p=e(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h1><p>This section will help you build a simple test for already existing <a href="http://ASP.NET" target="_blank" rel="noreferrer">ASP.NET</a> application.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>FlueFlame only supports .NET 6.0 or greater.</p></div><h2 id="step-1-create-unit-test-project" tabindex="-1">Step. 1: Create Unit test project <a class="header-anchor" href="#step-1-create-unit-test-project" aria-hidden="true">#</a></h2><p>You can use any test framework like xUnit, NUnit or MSTest. All examples in the documentation will be written in NUnit.</p><p>Add to your test project a NuGet Package <a href="https://www.nuget.org/packages/FlueFlame.AspNet/" target="_blank" rel="noreferrer">FlueFlame.AspNet</a>:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">dotnet add package FlueFlame.AspNet --version 0.1.1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="step-2-create-testbase-class" tabindex="-1">Step. 2: Create TestBase class <a class="header-anchor" href="#step-2-create-testbase-class" aria-hidden="true">#</a></h2><p>All tests will inherit from the <code>TestBase</code> base class:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestBase</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFlueFlameHost</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Application</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TestBase</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">webApp</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WebApplicationFactory</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Program</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithWebHostBuilder</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">builder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;">//Configure your services here</span></span>
<span class="line"><span style="color:#A6ACCD;">                builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ConfigureServices</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">services</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">descriptor</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> services</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SingleOrDefault</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#FFCB6B;">d</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> d</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ServiceType </span><span style="color:#89DDFF;">==</span></span>
<span class="line"><span style="color:#A6ACCD;">                             </span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DbContextOptions</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">EmployeeContext</span><span style="color:#89DDFF;">&gt;));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    services</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Remove</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">descriptor</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                    services</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddDbContext</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">EmployeeContext</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#FFCB6B;">options</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                        options</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UseInMemoryDatabase</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">InMemoryDbForTesting</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;">// override the environment if you need to</span></span>
<span class="line"><span style="color:#A6ACCD;">                builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UseEnvironment</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Testing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        Application </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> TestApplicationBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateDefaultBuilder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">webApp</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UseNewtonsoftJson</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>In the constructor, you need to create a <code>WebApplicationFactory</code>, specifying your Program class.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Since .NET 6, the <code>Program</code> class has been deprecated. It can be declared by adding the following code in the end of <code>Program.cs</code> file:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#F78C6C;">namespace</span><span style="color:#A6ACCD;"> Testing</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TestData</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">AspNetCore</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">partial</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Program</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></div><p>Use the <code>WithWebHostBuilder</code> method to configure your application. For example, use <code>InMemoryDatabase</code> if necessary. Read more in the official <a href="https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-7.0#customize-webapplicationfactory" target="_blank" rel="noreferrer">documentation</a>.</p><p><code>TestApplicationBuilder</code> creates and configures <code>IFlueFlameHost</code>. For example, you can call the <code>UseNewtonsoftJson()</code> method if you want to use NewtonsoftJson serialization. It is recommended to use the same serializer that you use in your <a href="http://ASP.NET" target="_blank" rel="noreferrer">ASP.NET</a> application to avoid incorrect serialization/deserialization. By default <code>IFlueFlameHost</code> uses <code>System.Text.Json</code>.</p><h2 id="step-3-your-first-test" tabindex="-1">Step. 3: Your first test <a class="header-anchor" href="#step-3-your-first-test" aria-hidden="true">#</a></h2><p>Create a test class that inherits from <code>TestBase</code>.</p><p>Let&#39;s say your application already has an endpoint that returns all employees. The next test sends a <code>GET</code> request to <code>/api/employee/all</code> and checks that the response returned is <code>200 OK</code>:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SimpleTests</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestBase</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Test</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetReturnsOk</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        Application</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Http</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Get</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Url</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/api/employee/all</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Send</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Response</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AssertStatusCode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">HttpStatusCode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OK</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Learn more about REST API testing <a href="/FlueFlame/rest/basic">here</a></p><h2 id="what-s-next" tabindex="-1">What&#39;s next? <a class="header-anchor" href="#what-s-next" aria-hidden="true">#</a></h2><p>You have familiarized yourself with the basic functionality of FlueFlame. Now you can <a href="/FlueFlame/rest/basic">deep</a> into testing your REST API and learn how to send and test received objects.</p><p>FlueFlame supports testing not only REST APIs, but also technologies such as <a href="/FlueFlame/signalr/basic">SignalR</a> and <a href="/FlueFlame/grpc/basic">gRPC</a>. Over time, we will add the ability to test GraphQL and other popular technologies.</p>`,22),o=[p];function t(c,r,i,F,y,D){return n(),a("div",null,o)}const d=s(l,[["render",t]]);export{A as __pageData,d as default};
