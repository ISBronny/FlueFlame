import{_ as s,c as a,o as n,b as e}from"./app.40687699.js";const F=JSON.parse('{"title":"Getting started","description":"","frontmatter":{},"headers":[{"level":2,"title":"Project setup","slug":"project-setup","link":"#project-setup","children":[]},{"level":2,"title":"Simple test","slug":"simple-test","link":"#simple-test","children":[]}],"relativePath":"grpc/getting-started.md","lastUpdated":1673154033000}'),p={name:"grpc/getting-started.md"},l=e(`<h1 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h1><p>FlueFlame provides a convenient interface for testing all kinds of gRPC requests. To do this, it will use your protobuf file and generate the standard client <a href="https://www.nuget.org/packages/Grpc.Net.Client" target="_blank" rel="noreferrer">Grpc.Net.Clinet</a>.</p><h2 id="project-setup" tabindex="-1">Project setup <a class="header-anchor" href="#project-setup" aria-hidden="true">#</a></h2><p>You can view the complete code sample from this documentation in the GitHub <a href="https://github.com/ISBronny/FlueFlame/tree/master/src/Examples.Tests.Api" target="_blank" rel="noreferrer">repositories</a>. We have an <code>Examples.Api</code> project with an ASP.NET-based gRPC server implementation and an <code>Examples.Tests.Api</code> test project.</p><p>First you need to add to the test project all the dependencies for generating the client, as in the official <a href="https://learn.microsoft.com/en-us/aspnet/core/tutorials/grpc/grpc-start?view=aspnetcore-7.0&amp;tabs=visual-studio-code#add-required-nuget-packages" target="_blank" rel="noreferrer">documentation</a>:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">dotnet add Examples.Tests.Api.csproj package Google.Protobuf</span></span>
<span class="line"><span style="color:#A6ACCD;">dotnet add Examples.Tests.Api.csproj package Grpc.Tools</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>Grpc.Net.Client</strong> comes with <strong>FlueFlame.AspNetCore.Grpc</strong> so you don&#39;t need to add it as a dependency</p></div><p>Then add a link to the protobuf file in <code>Examples.Tests.Api.csproj</code>:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">&lt;ItemGroup&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;Protobuf Include=&quot;..\\Examples.Api\\Protos\\employees.proto&quot; GrpcServices=&quot;Client&quot; /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/ItemGroup&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>IFlueFlameGrpcHost</code> is created <a href="/FlueFlame/rest/configuration">similarly</a> to <code>IFlueFlameHttpHost</code>. Add to your TestBase the line class:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">abstract</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestBase</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IDisposable</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;">//Previous properties</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFlueFlameGrpcHost</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GrpcHost</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TestBase</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">//...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">//Initialize IFlueFlameGrpcHost</span></span>
<span class="line"><span style="color:#A6ACCD;">        GrpcHost </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BuildGrpcHost</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="simple-test" tabindex="-1">Simple test <a class="header-anchor" href="#simple-test" aria-hidden="true">#</a></h2><p>The protobuf file describes the RPC for getting an employee by his ID:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">syntax = &quot;proto3&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">import &quot;google/protobuf/wrappers.proto&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">package Examples.Grpc;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">service EmployeeService {</span></span>
<span class="line"><span style="color:#A6ACCD;">  rpc GetById(google.protobuf.StringValue) returns (Employee);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">message Employee {</span></span>
<span class="line"><span style="color:#A6ACCD;">  string guid = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">  string full_name = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">  string position = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;">  int32 age = 4;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>gRPC does not support the use of scalar types such as <code>string</code> to describe RPC arguments. Therefore, we will use wrappers such as google.protobuf.StringValue.</p></div><p>Let&#39;s write a test that calls the <code>GetById</code> method and checks that an object with the correct ID has returned:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EmployeeServiceTests</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestBase</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetByIdTest_Exists_ReturnsEmployee</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">//Create Employee in DB</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">employee</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EmployeeTestDataBuilder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">EmployeeContext</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		GrpcHost</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateClient</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">EmployeeService</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">EmployeeServiceClient</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Unary</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Call</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetById</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StringValue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> Value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> employee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Guid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ToString</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}))</span></span>
<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Response</span></span>
<span class="line"><span style="color:#A6ACCD;">					</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AssertThat</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">e</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Guid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Should</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Be</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">employee</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Guid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ToString</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>In the Generic CreateConnection method, you need to specify the class of the generated client. Note that the <code>EmployeeServiceClient</code> client class is nested within the <code>EmployeeService</code> class.</p>`,18),o=[l];function t(c,r,i,y,C,A){return n(),a("div",null,o)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
