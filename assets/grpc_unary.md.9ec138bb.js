import{_ as s,c as a,o as n,b as l}from"./app.40687699.js";const i=JSON.parse('{"title":"Unary RPC","description":"","frontmatter":{},"headers":[{"level":2,"title":"Create Client","slug":"create-client","link":"#create-client","children":[]},{"level":2,"title":"Call RPC","slug":"call-rpc","link":"#call-rpc","children":[]},{"level":2,"title":"Assert Response","slug":"assert-response","link":"#assert-response","children":[]}],"relativePath":"grpc/unary.md","lastUpdated":1673152865000}'),p={name:"grpc/unary.md"},e=l(`<h1 id="unary-rpc" tabindex="-1">Unary RPC <a class="header-anchor" href="#unary-rpc" aria-hidden="true">#</a></h1><p>We have a protobuf file with a Unary RPC <code>GetById</code> defined:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">syntax = &quot;proto3&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">import &quot;google/protobuf/wrappers.proto&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">package Examples.Grpc;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">service EmployeeService {</span></span>
<span class="line"><span style="color:#A6ACCD;">  rpc GetById(google.protobuf.StringValue) returns (Employee);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">message Employee {</span></span>
<span class="line"><span style="color:#A6ACCD;">  string guid = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">  string full_name = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">  string position = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;">  int32 age = 4;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="create-client" tabindex="-1">Create Client <a class="header-anchor" href="#create-client" aria-hidden="true">#</a></h2><p>First you need to create a client:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">GrpcHost</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateClient</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">EmployeeService</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">EmployeeServiceClient</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"></span></code></pre></div><p>FluFlame itself will create a client with the necessary <code>GrpcChannel</code> and <code>GrpcChannelOptions</code>, however, we can specify custom ones:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">GrpcHost</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateClient</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">EmployeeService</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">EmployeeServiceClient</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GrpcChannelOptions</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		Credentials </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ChannelCredentials</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Insecure</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// Or</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">GrpcHost</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateClient</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">EmployeeService</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">EmployeeServiceClient</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">		GrpcChannel</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ForAddress</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://myaddress.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GrpcChannelOptions</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"></span></code></pre></div><h2 id="call-rpc" tabindex="-1">Call RPC <a class="header-anchor" href="#call-rpc" aria-hidden="true">#</a></h2><p>After you have created a client, you need to choose one of the four types of RPC. Access to different RPCs is provided through 4 properties: <code>Unary</code>, <code>ClientStreaming</code>, <code>ServerStreaming</code> and <code>Bidirectional</code>. After selecting the RPC type, call the <code>Call</code> method with the desired client method:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">GrpcHost</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateClient</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">EmployeeService</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">EmployeeServiceClient</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Unary</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Call</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetById</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StringValue</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c8a24c0d-7783-4e24-ae06-8742e4a9a039</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}));</span></span>
<span class="line"></span></code></pre></div><h2 id="assert-response" tabindex="-1">Assert Response <a class="header-anchor" href="#assert-response" aria-hidden="true">#</a></h2><p>Similar to REST testing, let&#39;s access the Response property to access the response:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">GrpcHost</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateClient</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">EmployeeService</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">EmployeeServiceClient</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Unary</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Call</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetById</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StringValue</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c8a24c0d-7783-4e24-ae06-8742e4a9a039</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Response</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Check the status of the request code and response:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">GrpcHost</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateClient</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">EmployeeService</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">EmployeeServiceClient</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Unary</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Call</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetById</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StringValue</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c8a24c0d-7783-4e24-ae06-8742e4a9a039</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Response</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AssertStatusCode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">StatusCode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OK</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AssertThat</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">e</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Age</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Should</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Be</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">21</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span></code></pre></div>`,16),o=[e];function t(c,r,y,F,D,C){return n(),a("div",null,o)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
